from datetime import datetime  # импортируем библиотеку datetime для проверки формата дат
notes = []
def create_note():
    global notes
    date = datetime.now()

    while True:  # бесконечный цикл
        yes_no = input("Вы хотите создать новую заметку? (да или нет):")  # вопрос пользователю о создании заметок

        if yes_no.lower() == "да":  # если пользователь ответит да
            name = input("Введите имя пользователя:")  # спрашиваем у пользователя имя создателя заметки

            if name == "":  # если пользователь не вводит имя
                name = "нету"
            title = input("Введите заголовок заметки:")  # спрашиваем у пользователя заголовок заметки

            if title == "":  # если пользователь не вводит заголовок
                title = "нету"
            content = input("Введите описание заметки:")  # спрашиваем у пользователя описание заметки

            if content == "":  # если пользователь не вводит описание
                content = "нету"
            status = input(
                "Введите статус заметки (в процессе/завершена и т.п.):")  # спрашиваем у пользователя статус заметки

            if status == "":  # если пользователь не вводит статус
                status = "нету"

            while True:  # бесконечный цикл
                issue_date = input(
                    "Введите дату дедлайна в формате день-месяц-год (пример: 12-12-2025): ")  # спрашиваем у пользователя дату дедлайна

                try:  # проверяем формат даты
                    datetime.strptime(issue_date, '%d-%m-%Y')
                except ValueError:  # если формат не верный
                    print("Введите дату в правильном формате (пример: 12-12-2024)")
                    continue  # продолжение цикла
                break  # остановка цикла

            note = {"username": name, "title": title, "content": content,
                    "status": status, "created_date": (f"{date.day}-{date.month}-{date.year}"),
                    "issue_date": issue_date}  # создаём заметку
            notes.append(note)  # добавляем заметку в список
            print(f'\nВаша заметка успешно добавлена: {note}')

        elif yes_no.lower() == "нет":  # если пользователь ответит нет

            if not notes:
                print('Хорошо, до свидания')
            else :
                print("До свидания")  # прощаемся и выводим все заметки
            break  # остановка цикла

        else:  # если пользователь не ввёл ни да, ни нет
            print("Пожалуйста введите да или нет без пробелов и посторонних знаков")  # просим ввести да или нет
    return notes
#--------------------------------------------------------------------------------------------------------------------------------- разделяю функции
def display_notes(notes):  # Создаём функцию
    if not notes: # если заметок нет
        print('У вас нет сохранённых заметок')
        return
    print("Вот все ваши заметки:")
    for i , note in enumerate(notes, start = 1): # цикл for
        print(f'\nЗаметка №{i}:') # Выводим номер заметки
        print(f'Имя пользователя: {note['username']}') # Выводим имя пользователя заметки №i
        print(f'Заголовок заметки: {note['title']}') # Выводим заголовок заметки №i
        print(f'Описание заметки: {note['content']}') # Выводим описание заметки №i
        print(f'Статус заметки: {note['status']}') # Выводим статус заметки №i
        print(f'Дата создания заметки: {note['created_date']}') # Выводим дату создания заметки №i
        print(f'Дата дедлайна: {note['issue_date']}') # Выводим дату дедлайна заметки №i
        print('---------------------------------------------------------') # Красиво разделяем заметки
#------------------------------------------------------------------------------------------------------------------------------------ разделяю функции
def update_note():  # создаём функцию

    if not notes:
        print('У вас нет сохранённых заметок')
        return
    display_notes(notes) # Показываем текущие заметки

    while True:
        try:
            index = int(input('Введите номер заметки для изменения:'))
            selected_note = notes[index - 1]
            break

        except (ValueError,IndexError):
            print('Пожалуйста, введите номер заметки из предложенных\n')
            continue

    while True:  # бесконечный цикл
        new_value = input(
            'Какие данные вы хотите обновить ?(username, title, content, status, issue_date): ')  # Спрашиваем у пользователя какие данные надо обновить
        new_value = new_value.lower()  # Переводим ключ в нижний регистр

        if new_value in ['username', 'title', 'content','status']:  # Если пользователь вводит из предложенных, но не дедлайн
            note_change = input(f'Введите новое значение для {new_value}: ')  # Просим пользователя ввести новые данные
            selected_note[new_value] = note_change  # Обновляем данные заметки

            print(f'Заметка обновлена:\n'
                  f'{notes}')  # Выводим обновлённую заметку
            break  # Останавливаем цикл

        elif new_value == "issue_date":  # Если пользователь решит изменить дату дедлайна

            while True:  # бесконечный цикл
                note_change = input(f'Введите новое значение для {new_value}:')  # Просим пользователя ввести новую дату

                try:  # проверяем формат даты
                    datetime.strptime(note_change, '%d-%m-%Y')

                except ValueError:  # если формат даты неправильный
                    print(
                        "\nВы ввели некорректный формат даты. Пожалуйста убедитесь, что дата введена в формате день-месяц-год (пример 12-12-2024) ")  # выводим
                    continue
                selected_note[new_value] = note_change  # Обновляем данные заметки
                print(f'Заметка обновлена:\n'
                      f'{notes}')  # Выводим обновлённую заметку
                break  # Останавливаем цикл
            break  # Останавливаем цикл

        else:
            print('\nПожалуйста введите одно из предложенных - username, title, content, status, issue_date')  # выводим
            continue  # Продолжаем цикл
#---------------------------------------------------------------------------------------------------------------------------------------------разделяю функции
def delete_note():
    global notes
    if not notes:
        print('У вас нет сохранённых заметок')
        return
    display_notes(notes)

    while True:  # цикл
        how_delete = input(
            "По какому критерию вы хотите удалить заметку? (Имя или Заголовок): ")  # Спрашиваем критерий удаления заметки

        if how_delete.lower() == 'имя':  # если критерий имя
            name = input('Введите имя: ')  # просим ввести имя
            found = False
            new_notes = []  # создаём обновлённый список

            for note in notes:  # цикл
                if note["username"].lower() != name.lower():  # если такого имени нет
                    new_notes.append(note)  # добавляем заметку в новый список
                else:  # если такое имя есть
                    found = True # создаём переменную для проверки наличия заметки с введённым именем
            if found:  # # если введённое имя в заметке есть, меняем переменную
                notes = new_notes  # приравниваем старый список к новому
                print(f"Все заметки с именем '{name}' были удалены.")
                print("\nОбновленные заметки:\n")
                display_notes(notes)

            else:  # если введённого имени нет
                print(f"Заметки с именем '{name}' не найдены.")
            break  # останавливаем цикл

        elif how_delete.lower() == 'заголовок':  # если выбранный критерий это заголовок
            title = input('Введите заголовок: ')
            found = False # создаём переменную для проверки наличия введённого заголовка в заметке
            new_notes = []  # создаём обновлённый список
            for note in notes:  # цикл
                if note["title"].lower() != title.lower():  # если введённого заголовка нет в заметке
                    new_notes.append(note)  # добавляем эту заметку в обновлённый список
                else:  # если введённый заголовок в заметке есть, меняем переменную
                    found = True

            if found:  # если есть заметка с введённым заголовком
                notes = new_notes  # приравниваем старый список к новому
                print(f"Все заметки с заголовком '{title}' были удалены.")
                print("\nОбновленные заметки:\n")
                display_notes(notes)

            else:  # если заметки не найдены
                print(f"Заметки с заголовком '{title}' не найдены.")
            break  # останавливаем цикл

        else: # если не ввели критерий для удаления
            print("Пожалуйста введите 'имя' или 'заголовок'.")
#---------------------------------------------------------------------------------------------------------------------------------------------разделяю функции
def search_notes(notes, keyword=None, status=None):  # создаём функцию
    if not notes: # проверка на наличие заметок
        print('У вас нет сохранённых заметок')
        return
    results = []  # создаём список со всеми результатами

    if choice == '1':  # если пользователь выбрал 1 критерий

        for note in notes:  # цикл
            if ((keyword in note['username'].lower()) or (keyword in note['title'].lower()) or (
                    keyword in note[
                'content'].lower())):  # если ключевое слово есть в имени пользователя, в заголовке заметки или в описании заметки
                results.append(note)  # добавляем заметку в список результатов

        if len(results) == 0:  # если ни одна заметка не попала в список результатов
            print('\nНи одной заметки с данным ключевым словом не найдено')

        else:  # если хоть одна заметка попала в список результатов
            print('\nВсе найденные заметки:')

            for i, note in enumerate(results, start=1):  # цикл for для вывода заметок
                print(f'\nЗаметка №{i}:')  # Выводим номер заметки
                print(f'Имя пользователя: {note['username']}')  # Выводим имя пользователя заметки №i
                print(f'Заголовок заметки: {note['title']}')  # Выводим заголовок заметки №i
                print(f'Описание заметки: {note['content']}')  # Выводим описание заметки №i
                print(f'Статус заметки: {note['status']}')  # Выводим статус заметки №i
                print(f'Дата создания заметки: {note['created_date']}')  # Выводим дату создания заметки №i
                print(f'Дата дедлайна: {note['issue_date']}')  # Выводим дату дедлайна заметки №i
                print('---------------------------------------------------------')  # Красиво разделяем заметки

    elif choice == '2':  # если пользователь выбрал 2 критерий

        for note in notes:  # цикл
            if status == note['status'].lower():  # если введённый статус равен статусу заметки
                results.append(note)  # добавляем заметку в список результатов

        if len(results) == 0:  # если ни одна заметка не попала в список результатов
            print('\nНи одной заметки с таким статусом не было найдено')


        else:  # если хоть одна заметка попала в список результатов
            print('\nВсе найденные заметки:')

            for i, note in enumerate(results, start=1):  # цикл for
                print(f'\nЗаметка №{i}:')  # Выводим номер заметки
                print(f'Имя пользователя: {note['username']}')  # Выводим имя пользователя заметки №i
                print(f'Заголовок заметки: {note['title']}')  # Выводим заголовок заметки №i
                print(f'Описание заметки: {note['content']}')  # Выводим описание заметки №i
                print(f'Статус заметки: {note['status']}')  # Выводим статус заметки №i
                print(f'Дата создания заметки: {note['created_date']}')  # Выводим дату создания заметки №i
                print(f'Дата дедлайна: {note['issue_date']}')  # Выводим дату дедлайна заметки №i
                print('---------------------------------------------------------')  # Красиво разделяем заметки
    elif choice == '3': # если пользователь выбрал 3 критерий
        for note in notes:  # цикл
            if status == note['status'].lower() or (
                    (keyword in note['username'].lower()) or (keyword in note['title'].lower()) or
                    (keyword in note['content'].lower())):  # если введённый статус равен статусу заметки или ключевое слово есть в имени пользователя, в заголовке заметки или в описании заметки
                results.append(note)  # добавляем заметку в список результатов

        if len(results) == 0:  # если ни одна заметка не попала в список результатов
            print('\nНи одной заметки с таким статусом или ключевым словом не было найдено')

        else:  # если хоть одна заметка попала в список результатов
            print('\nВсе найденные заметки:')

            for i, note in enumerate(results, start=1):  # цикл for
                print(f'\nЗаметка №{i}:')  # Выводим номер заметки
                print(f'Имя пользователя: {note['username']}')  # Выводим имя пользователя заметки №i
                print(f'Заголовок заметки: {note['title']}')  # Выводим заголовок заметки №i
                print(f'Описание заметки: {note['content']}')  # Выводим описание заметки №i
                print(f'Статус заметки: {note['status']}')  # Выводим статус заметки №i
                print(f'Дата создания заметки: {note['created_date']}')  # Выводим дату создания заметки №i
                print(f'Дата дедлайна: {note['issue_date']}')  # Выводим дату дедлайна заметки №i
                print('---------------------------------------------------------')  # Красиво разделяем заметки
    return results # возвращаем список найденных заметок


def how_to_search():
    global choice
    if not notes:
        print('У вас нет сохраненных заметок')
        return

    print(f'Список всех текущих заметок:\n{notes}')  # выводим все заметки

    while True:
        choice = input(
            '\nВыберите критерий для поиска заметки (введите 1, 2 или 3) \n'  # Даём пользователю выбрать критерий для поиска
            '1.Ключевое слово\n'
            '2.Статус заметки\n'
            '3.Ключевое слово и статус заметки:\n')

        if choice == '1':  # если пользователь выбрал 1 критерий
            keyword = input("Введите ключевое слово: ").lower()  # запрашиваем у пользователя ключевое слово

            if keyword == '': # если не ввели ключевое слово
                print('\nВы не ввели ключевое слово')
                continue
            search_notes(notes, keyword, ) # выводим функцию
            break # остановка цикла

        elif choice == '2':  # если пользователь выбрал 2 критерий
            status = input("Введите статус: ").lower() # запрашиваем у пользователя статус

            if status == '':
                print('\nВы не ввели статус')
                continue
            search_notes(notes,status = status) # выводим функцию
            break # остановка цикла

        elif choice == '3':  # если пользователь выбрал 3 критерий
            keyword = input("Введите ключевое слово: ").lower()  # запрашиваем у пользователя ключевое слово
            status = input("Введите статус: ").lower()  # запрашиваем у пользователя статус

            if keyword == '': # если не ввели ключевое слово
                print('\nВы не ввели ключевое слово')
                continue

            elif status == '':
                print('\nВы не ввели статус')
                continue

            else:
                search_notes(notes, keyword, status)  # выводим функцию
                break # остановка цикла

        else:  # если пользователь не ввёл 1, 2 или 3
            print('\nПожалуйста введите 1, 2 или 3 (без пробелов или посторонних знаков)')
            continue
#---------------------------------------------------------------------------------------------------------------------------------------------разделяю функции
while True:
    menu = input('\nМеню действий:\n' # меню действий
                '1. Создать новую заметку\n'
                '2. Показать все заметки\n'
                '3. Обновить заметку\n'
                '4. Удалить заметку\n'
                '5. Найти заметки\n'
                '6. Выйти из программы\n-')

    if menu == '1' : # если пользователь ввел 1
        create_note()

    elif menu == '2': # если пользователь ввел 2
        display_notes(notes)

    elif menu == '3': # если пользователь ввел 3
        update_note()

    elif menu == '4': # если пользователь ввел 4
        delete_note()

    elif menu == '5': # если пользователь ввел 5
        how_to_search()

    elif menu == '6': # если пользователь ввел 6
        print('Хорошо, до свидания')
        break
    else: # если пользователь не ввел ни одно из предложенных
        print('Пожалуйста выберете из перечисленного (1, 2, 3, 4, 5 или 6)')
        continue